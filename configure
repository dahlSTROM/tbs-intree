#!/bin/bash

die_unknown(){
    echo -en "
\E[1;33;44mUnknown option \"$1\".\E[0m

"
    ./configure --help
    exit 1
}

die(){
    echo -en "
\E[1;33;44m$1, aborting...\E[0m

"
    exit 1
}

confirmyes(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [Y/n]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        [nN][oO]|[nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

show_help(){
  echo " Usage: ./configure --opt=<opt>"
  echo "                        "
  echo " Options: [default], if any, in brackets after option."
  echo "                        "
  echo " --help                 Print this message"
  echo "                        "
  echo " --vanilla=<bool>       Set vanilla kernel to use,"
  echo "                        like 4.0-rc5."
  echo "                        "
  echo " --linux_next=<opt>     [no] yes: compile a kernel from"
  echo "                        current linux-next git repo."
  echo "                        Using linux-next disables --vanilla"
  echo "                        "
  echo " --update=<opt>         [yes] no: don't clean local clone and"
  echo "                        don't pull in any updates."
  echo "                        "
  echo " --sysupdate=<opt>      [yes] no: don't do apt-get update and friends."
  echo "                        "
  echo " --builddep=<opt>       [yes] no: don't apt-get install build deps."
  echo "                        "
  echo " --dvb_core=<opt>       [no] yes: patch dvbdev.c for FFdecsawrapper"
  echo "                        "
  echo " --adapters=<opt>       [16] set max num of adapters."
  echo "                        "
  echo " --debug=<opt>          [no] yes: print output of compiling the kernel"
  echo "                        to ../build.log except for errors/warnings"
  echo "                        "
  exit 0
}

# Set defaults

vanilla_opt=""
linuxnext_opt="no"
update_opt="yes"
sysupdate_opt="yes"
builddep_opt="yes"
dvbcore_opt="no"
adapters_opt="16"
debug_opt="no"

for opt do
  optval="${opt#*=}"
  case "$opt" in
  --vanilla=*) vanilla_opt="$optval"
  ;;
  --linux_next=*) linuxnext_opt="$optval"; vanilla_opt=""
  ;;
  --update=*) update_opt="$optval"
  ;;
  --sysupdate=*) sysupdate_opt="$optval"
  ;;
  --builddep=*) builddep_opt="$optval"
  ;;
  --dvb_core=*) dvbcore_opt="$optval"
  ;;
  --adapters=*) adapters_opt="$optval"
  ;;
  --debug=*) debug_opt="$optval"
  ;;
  --help) show_help
  ;;
  *)
  die_unknown $opt
  ;;
  esac
done

# Check git status
if [ "x$update_opt" = "xyes" ]; then
  git clean -xfd > /dev/null
  git reset --hard HEAD > /dev/null
  rm -rf linux*
  git remote update > /dev/null 2>&1
  if ! [ "$?" -eq 0 ]; then
    echo -en "
\E[1;33;44m
###################################

Error(s) encountered while updating

the status from remote git repo.

Aborting...

####################################
\E[0m


"
    exit 1
  fi
  LOCAL=$(git rev-parse @{0})
  REMOTE=$(git rev-parse @{u})
  BASE=$(git merge-base @{0} @{u})

  if [ $LOCAL = $REMOTE ]; then
    GITSTATUS="0"    # "Up-to-date"
  elif [ $LOCAL = $BASE ]; then
    GITSTATUS="1"    # "Need to pull"
  elif [ $REMOTE = $BASE ]; then
    GITSTATUS="2"    # "Need to push"
  else
    GITSTATUS="3"    # "Diverged"
  fi
  if [ "$GITSTATUS" -eq "0" ]; then
    echo "
Your local clone is clean and up-to-date
"
    sleep 3
  elif [ "$GITSTATUS" -eq "1" ]; then
    echo "
Going to sync your local clone with updated remote repo.
"
    sleep 3
    git pull > /dev/null
    if ! [ "$?" -eq 0 ]; then
      echo -en "
\E[1;33;44m
###################################

Error(s) encountered while syncing

local with remote repo

Aborting...

####################################
\E[0m


"
      exit 1
    else
      echo -en "
\E[1;33;44m
###################################################

Synced with remote repo successfully! Please rerun

./configure to complete installation of drivers.

Arrow up and enter will get you there.

####################################################
\E[0m


"
      exit 0
    fi
  elif [ "$GITSTATUS" -eq "2" -o "$GITSTATUS" -eq "3" ]; then
    echo -en "
\E[1;33;44m
#####################################

Your local clone cannot be synced

with remote repo due to local changes

Aborting...

######################################
\E[0m


"
    exit 1
  fi    
fi

OS=$( lsb_release -si )


RELEASE=$( lsb_release -sc )

if ! [ "$OS" = Debian -o "$OS" = Ubuntu ] ; then
  echo -en "
\E[1;33;44m
Your operating system is not supported.

It should be Debian or Ubuntu.

Aborting...
\E[0m

"
  exit 0
fi

# Make sure that we are running as root

if ! echo "$(whoami)" | grep "root" > /dev/null 2>&1; then
  echo -en "
\E[1;33;44m
You should run as root.

Aborting...
\E[0m

"
  exit 0
fi

if [ "x$builddep_opt" = "xyes" ]; then
# Install dependencies for building the kernel
  apt-get build-dep linux --no-install-recommends -y || die "Error installing \"build-dep linux\""

  if ! dpkg-query -l fakeroot | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency fakeroot, marking for installation.
"
    apt-get install fakeroot --no-install-recommends -y || die "Error installing dependency fakeroot"
  fi

  if ! dpkg-query -l kernel-package | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency kernel-package, marking for installation.
"
    apt-get install kernel-package --no-install-recommends -y || die "Error installing dependency kernel-package"
  fi

  if ! dpkg-query -l bin86 | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency bin86, marking for installation.
"
    apt-get install bin86 --no-install-recommends -y || die "Error installing dependency bin86"
  fi

  if ! dpkg-query -l devscripts | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency devscripts, marking for installation.
"
    apt-get install devscripts --no-install-recommends -y || die "Error installing dependency devscripts"
  fi

  if ! dpkg-query -l binutils-dev | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency binutils-dev, marking for installation.
"
    apt-get install binutils-dev --no-install-recommends -y || die "Error installing dependency binutils-dev"
  fi

  if ! dpkg-query -l crash | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency crash, marking for installation.
"
    apt-get install crash --no-install-recommends -y || die "Error installing dependency crash"
  fi

  if ! dpkg-query -l libncurses5-dev | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency libncurses5-dev, marking for installation.
"
    apt-get install libncurses5-dev --no-install-recommends -y || die "Error installing dependency libncurses5-dev"
  fi

  if ! dpkg-query -l libnuma-dev | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency libnuma-dev, marking for installation.
"
    apt-get install libnuma-dev --no-install-recommends -y || die "Error installing dependency libnuma-dev"
  fi

  if ! dpkg-query -l libperl-dev | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency libperl-dev, marking for installation.
"
    apt-get install libperl-dev --no-install-recommends -y || die "Error installing dependency libperl-dev"
  fi

  if ! dpkg-query -l makedumpfile | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency makedumpfile, marking for installation.
"
    apt-get install makedumpfile --no-install-recommends -y || die "Error installing dependency makedumpfile"
  fi

  if ! dpkg-query -l libelf-dev | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency libelf-dev, marking for installation.
"
    apt-get install libelf-dev --no-install-recommends -y || die "Error installing dependency libelf-dev"
  fi

  if ! dpkg-query -l python-six | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency python-six, marking for installation.
"
    apt-get install python-six --no-install-recommends -y || die "Error installing dependency python-six"
  fi

  if ! dpkg-query -l initramfs-tools | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency initramfs-tools, marking for installation.
"
    apt-get install initramfs-tools --no-install-recommends -y || die "Error installing dependency initramfs-tools"
  fi

  if ! dpkg-query -l libfile-fcntllock-perl | grep "ii" > /dev/null 2>&1; then
    echo "
Missing dependency libfile-fcntllock-perl, marking for installation.
"
    apt-get install libfile-fcntllock-perl --no-install-recommends -y || die "Error installing dependency libfile-fcntllock-perl"
  fi
fi

MAJOR=$( echo "$vanilla_opt" | cut -d'.' -f1 )
VERSION=$( echo "$vanilla_opt" | cut -d'.' -f2 | cut -d'-' -f1 )

#
# Check for minimum supported kernel version to build with
# (should be 3.18 or up)
#
MINVERSION="18"
  if [ "x$vanilla_opt" != "x" ]; then
    if [ "$MAJOR" -lt "4" ]; then
      if ! [ "$VERSION" -eq "10" ]; then
        if [ "$VERSION" -lt "$MINVERSION" ]; then
          echo -en "
\E[1;33;44m
This TBS6680 driver is supported intree as of 3.18.x kernels.

You requested a build with a $vanilla_opt kernel.

Aborting...
\E[0m

"
          exit 0
        fi
      fi
    fi
  elif [ "x$linuxnext_opt" = "x" ]; then
    echo -en "
\E[1;33;44m
You did not enter a kernel version to use.

Please use the --vanilla=<opt> or --linux_next=yes option.

Aborting...
\E[0m

"
    sleep 5
    ./configure --help
    exit 0
  fi

# First get some info on what we are running

if [ -f /usr/bin/lsb_release ]; then
  OS=$( lsb_release -si )
  RELEASE=$( lsb_release -sc )
fi

# Get the system up-to-date
if [ "x$sysupdate_opt" = "xyes" ]; then
  apt-get update || die "Error(s) while updating your systems package list"
  apt-get dist-upgrade -y || die "Error(s) while updating your system"
fi

# Get the linux source
  if [ "x$linuxnext_opt" = "xyes" ]; then
    git clone --depth=1 git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git ./linux || die "Error(s) while fetching Linux source"
  elif ! echo "$vanilla_opt" | grep "rc" > /dev/null 2>&1; then
    wget https://www.kernel.org/pub/linux/kernel/v$MAJOR.x/linux-$vanilla_opt.tar.xz || die "Error(s) while fetching Linux source"
  else
    wget https://www.kernel.org/pub/linux/kernel/v4.x/testing/linux-$vanilla_opt.tar.xz || die "Error(s) while fetching Linux source"
  fi

if ! [ "$?" -eq 0 ]; then
  echo -en "
\E[1;33;44m
Failed to download requested  $vanilla_opt.tar.xz file,
or failed to clone linux-next git repo.

Aborting...
\E[0m

"
  exit 1
fi

if [ "x$linuxnext_opt" = "xyes" ]; then
  cd linux
else
  tar -xJf linux-$vanilla_opt.tar.xz && cd linux*
fi

# Patch it for use with FFdecsawrapper
if [ "x$dvbcore_opt" = "xyes" ]; then
  patch -p0 < ../dvb-core.patch
fi

# Get kernel version numbers

FIRST_DIGIT=$( echo `pwd` | grep -o '[[:digit:]]\+' | head -n2 | awk 'NR==2' )
SECOND_DIGIT=$( echo `pwd` | grep -o '[[:digit:]]\+' | head -n3 | awk 'NR==3' )

# Add TBS drivers to the kernel
cp -f ../amd64/drivers/media/dvb-frontends/* drivers/media/dvb-frontends/
cp -ar ../amd64/drivers/media/common/saa716x drivers/media/common
sed -i "s/obj-y += b2c2\/ saa7146\/ siano\//obj-y += b2c2\/ saa7146\/ siano\/ saa716x\//" drivers/media/common/Makefile
sed -i "$ a\
source \"drivers/media/common/saa716x/Kconfig\"" drivers/media/common/Kconfig
patch -p0 < ../Makefile.patch
patch -p0 < ../Kconfig.patch

echo -en "
\E[1;33;44m
Configuring your kernel using 'make oldconfig'.
\E[0m

"
    make oldconfig

  # Ask about 'make menuconfig'
  echo -en "
\E[1;33;44m
Do you want to run 'make menuconfig'?
"
    confirmyes "Yes, run it. [Y/n]"
    if [ "$?" -eq 0 ]; then
      make menuconfig
    fi

  # Change the max num of DVB adapters
  ADAPTERS=$( cat .config | grep "CONFIG_DVB_MAX_ADAPTERS" | grep -o '[[:digit:]]\+' )
  if ! [ "$ADAPTERS" = "$adapters_opt" ]; then
    sed -i "s/CONFIG_DVB_MAX_ADAPTERS=$ADAPTERS/CONFIG_DVB_MAX_ADAPTERS=$adapters_opt/" .config
  fi

  export CONCURRENCY_LEVEL=3
  echo "
"
  if [ "x$debug_opt" = "xyes" ]; then
    echo -en "
\E[1;33;44m

Compiling your kernel. Only warnings and errors are displayed

in your terminal. The idea is to get some useful debug output.

Please be (very) patient. When done, you'll be informed of the result.

\E[0m

"
    sleep 5
    make-kpkg --rootcmd fakeroot clean
    make-kpkg --rootcmd fakeroot --initrd kernel_image > ../build.log
  else
    echo -en "
\E[1;33;44m

Compiling your kernel. Please be (very) patient.

\E[0m

"
    sleep 5
    make-kpkg --rootcmd fakeroot clean
    make-kpkg --rootcmd fakeroot --initrd kernel_image
  fi

if [ "$?" -eq 0 ]; then
  echo -en "
\E[1;33;44m
RESULT:

Going to install your new kernel now.
\E[0m

"
  sleep 5
  cd ..
  rm -f xen*
  dpkg -i *.deb
  apt-get -f install -y
else
  echo -en "
\E[1;33;44m
RESULT:

Your kernel did not compile as it should.
\E[0m

Aborting...

"
  exit 1
fi
